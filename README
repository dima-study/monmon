monmon


Системный мониторинг: gRPC сервис по сбору статистики ОС
========================================================

gRPC сервис со сбором статистики и отправкой gRPC клиентам в потоковом режиме.


Выполненные требования
----------------------
[+] Обязательные требования для каждого проекта
  [+] Наличие юнит-тестов на ключевые алгоритмы (core-логику) сервиса.
  [+] Наличие валидных Dockerfile и Makefile/Taskfile для сервиса.
  [+] Ветка master успешно проходит пайплайн в CI-CD системе GitHub Actions. Пайплайн должен в себе содержать:
    [+] запуск последней версии golangci-lint на весь проект с конфигом, представленным в данном репозитории;
    [+] запуск юнит тестов командой вида go test -race -count 100;
    [+] сборку бинаря сервиса для версии Go не ниже 1.22.
[+] Реализован сбор:
  [+] load average (linux)
  [+] загрузка CPU (linux, windows)
[+] Сбор хотя бы одного типа статистики работает на разных ОС (linux, windows)
[+] Через конфигурацию можно отключать отдельную статистику
[+] Реализован простой клиент к серверу


Основная идея
-------------
Т.к. количество клиентов может быть неограниченным, то для минимизации потребления ресурсов используется следующая схема:
  - При запуске сервиса запускаются доступные провайдеры статистики и агрегатор статистики:
  - Провайдер отдаёт данные в каждые 100мс
  - Агрегатор накапливает указанные данные (размер агрегатора соответствует 1.1 секунде, т.е. 11 элементов)
  - Далее агрегатор ежесекундно отправляет данные следующему агрегатору, который накапливает данные
    (размер буфера соответствует 2 секундам, т.е. 2 элемента)
  - Клиенту, пришедшему с запросом на получение статистики, отдаются ежесекундные данные из второго агрегатора за запрашиваемый период.
    Если запрашиваемый период больше размера агрегатора, то размер агрегатора увеличивается до необходимого.

Соответственно, получаем единственный источник информации по статистике и максимальный размер агрегатора равный максимальному запрашиваемому периоду.


Основные сущности
-----------------
  - Провайдер - предоставляет данные статистики.
                pkg/stats/*/provider.go
  - Агрегатор - накапливает данные статистики и может отдавать по запросу усреднённые данные за определённый период.
                pkg/stats/*/aggregator.go
  - Планировщик агрегатора - позволяет связывать входящие данные статистики и агрегатор, а также планирует последующие чтения из агрегатора
    в случае запроса от клиента.
                pkg/scheduler/agg_scheduler.go
  - Координатор - запускает/останавливает провайдер, строит цепочку агрегаторов и назначает клиентов
                pkg/scheduler/coordinator.go
  - Агент - приложение, представляющее собой gRPC сервис со сбором статистики
  - Клиент - простой клиент для получения данных от агента


Сборка
------
Сборка осуществляется через команду make.
Доступна поддержка нескольких ОС: linux, windows

  - make build
      Локальная сборка для доступных архитектур/ОС
  - build-app
      Сборка приложений для текущей архитектуры
  - build-app-agent
      Сборка агента для текущей архитектуры
  - build-app-client
      Сборка клиента для текущей архитектуры
  - build-img-agent
      Сборка docker-образ с агентом (linux, x86-64)
  - build-img-all
      Сборка всех docker-образов
  - generate
      Запуск кодо-генерации
  - generate-proto
      Запуск кодо-генерации для proto-файлов
  - install-deps-all
      Установка необходимых зависимостей
  - install-deps-lint
      Установка линтера
  - install-deps-protoc
      Установка protoc
  - lint
      Линт проекта
  - run
    Запуск агента для текущей архитектуры с дефолтным конфигом
  - test
      Запуск тестов


Запуск агента
-------------
После сборки все приложения доступны в каталоге ./bin
Например, ./bin/monmon-agent.linux-amd64 или ./bin/monmon-agent.windows-amd64.exe

Доступные команды агента:
  providers
    Вывод списка провайдеров статистики
  start
    Запуск агента

Возможен запуск из docker-контейнера:
  make build-img-agent
  docker run -it --rm -p 50051:50051 monmon-agent:develop

Сервис будет по-умолчанию доступен на порте 50051.


Настройка агента
----------------
Настройка осуществляется через файл настройки или через переменные окружения.
    shutdown_timeout: таймаут ожидания завершения grpc сервера (по умолчанию 5s, env MONMON_SHUTDOWN_TIMEOUT)

    grpc:
      host: на каком хосте слушать соединения (по умолчанию localhost, env MONMON_GRPC_HOST)
      port: на каком порте слушать соединения (по умолчанию 50051, env MONMON_GRPC_PORT)

    logger:
      level: уровень логирования (по умолчанию info, доступен trace с подробнейшим выводом, env MONMON_LOG_LEVEL)

    service:
      accuracy: сколько делать в секунду "снимков" статистики по каждому провайдеру, по умолчанию 10, env MONMON_SERVICE_ACCURACY

      min_interval: мин интервал для получения статистики по запросам, по умолчанию 1, env MONMON_SERVICE_MIN_INTERVAL
      max_interval: макс интервал для получения статистики по запросам, по умолчанию 300, env MONMON_SERVICE_MAX_INTERVAL

      min_period: мин период за который возможно получить статистику, по умолчанию 1, env MONMON_SERVICE_MIN_PERIOD
      max_period: макс период за который возможно получить статистику, по умолчанию 300, env MONMON_SERVICE_MAX_PERIOD

      disabled_providers: # список отключённых провайдеров, env MONMON_SERVICE_DISABLED_PROVIDERS (разделитель - запятая - ',')
        #- loadavg
        #- cpuload


Запуск клиента
--------------
После сборки все приложения доступны в каталоге ./bin
Например, ./bin/monmon-client.linux-amd64 или ./bin/monmon-client.windows-amd64.exe

Доступные аргументы клиента:
  -connect
    Строка подключения к серверу, по умолчанию localhost:50051
  -interval
    Интервал получения статистики, по умолчанию 1 секунда
  -period
    Период, за который получать статистику, по умолчанию 1 секунда
  -stat
    Идентификатор доступной статистики, которую выводить на экран.
    Если аргумент -stat не указан, то с сервера будет получен и выведен список доступных статистик.
